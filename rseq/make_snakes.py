import snakemake as snk
import sys
import json
import shutil
import os


def make_snakes(run_path, config_files):
    """Python wrapper for snakemake api + log_handler function in RSeq

    :param run_path: path where run data is stored independent of files generated by snakemake
    :param config_files: list of snakemake config files in .json format
    :return: None
    """

    log_folder = run_path + '/logs/'
    if os.path.isdir(log_folder):
        shutil.rmtree(log_folder)
    os.makedirs(log_folder)

    for config_file in config_files:
        config = json.load(open(config_file))
        snk.snakemake('rseq/rseq.smk', unlock=True, config=config)  # Unlock any previous runs
        cores = config['cores'][0]

        def log_handler(msg):
            print(msg)
            level = msg["level"]
            error_log = log_folder + "error.log"
            progress_log = log_folder + "progress.log"
            output_log = log_folder + "output.log"
            run_info_log = log_folder + "run_info.log"
            job_info_log = log_folder + "job_info.log"
            job_finished_log = log_folder + "job_finished.log"

            def iter_message(log, message):
                if not os.path.exists(log):
                    json.dump({0: message}, open(log, 'w'))
                else:
                    json_dict = json.load(open(log))
                    max_key = max(json_dict.keys())
                    json_dict[int(max_key) + 1] = message
                    json.dump(json_dict, open(log, 'w'))

            if level == "progress":
                iter_message(progress_log, msg)
            elif level == "output":
                iter_message(output_log, msg)
            elif level == "error":
                iter_message(error_log, msg)
            elif level == "job_info":
                iter_message(job_info_log, msg)
            elif level == "job_finished":
                iter_message(job_finished_log, msg)
            elif level == "info":
                iter_message(run_info_log, msg)

        ret_bool = snk.snakemake('rseq/rseq.smk', force_incomplete=True,
                                 config=config, cores=cores, log_handler=[log_handler])
        if not ret_bool:
            break


if __name__ == "__main__":
    make_snakes(sys.argv[1], sys.argv[2:])
