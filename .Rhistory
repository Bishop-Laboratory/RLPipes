"-c", "/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/tests/qDRIP_ctr_R1.fastq",
"-g", "mm10", "-n", "my_experiment", "-o", "RSeq_out/", "-t", "20", "--noDedupe", "-m", "DRIP",
"/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/helpers")
argument_possibles <- data.frame(
short = c("e", "e1", "e2", "c", "c1", "c2", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA, NA),
long = c("experiment", "experiment_R1", "experiment_R2", "control", "control_R1", "control_R2",
"mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "force", "noDedupe", "keepTmp"),
type = c(rep("valued", 13), rep("valueless", 7)), stringsAsFactors = FALSE
)
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
errors <- c()
for (i in 1:(length(args)-1)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
# Exit for usage and version info
if (! is.null(collect_list$help)) {cat("usage"); quit(status = 0, save = "no")}
if (! is.null(collect_list$version)) {cat("version"); quit(status = 0, save = "no")}
# Compile experiment and control
experiment <- collect_list$experiment
experiment_R1 <- collect_list$experiment_R1
experiment_R2 <- collect_list$experiment_R2
control <- collect_list$control
control_R1 <- collect_list$control_R1
control_R2 <- collect_list$control_R2
# Set experiment values
if (! is.null(experiment_R1)) {
if (! is.null(experiment_R2)) {
experiment <- paste0(experiment_R1, "+", experiment_R2)
} else {
errors <- c(errors, "Fastq Experiment R1 provided, but not R2!")
}
}
# Set control values
if (! is.null(control_R1)) {
if (! is.null(control_R2)) {
control <- paste0(control_R1, "+", control_R2)
} else {
errors <- c(errors, "Fastq control R1 provided, but not R2!")
}
}
# Other variables
mode <- collect_list$mode
collect_list
argument_possibles <- data.frame(
short = c("e", "e1", "e2", "c", "c1", "c2", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA, NA),
long = c("experiment", "experiment_R1", "experiment_R2", "control", "control_R1", "control_R2",
"mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "force", "noDedupe", "keepTmp"),
type = c(rep("valued", 13), rep("valueless", 7)), stringsAsFactors = FALSE
)
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
errors <- c()
for (i in 1:(length(args)-4)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
i
i <- 13
arg <- args[i]
collect_list
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
errors <- c()
for (i in 1:(length(args)-7)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
collect_list
i
i <- 1
i <- 10
arg <- args[i]
collector
args
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
collector
i <- 11
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
collect_list
name
i <- 12
arg <- args[i]
arg
collector <- c(collector, arg)
i <- 13
arg <- args[i]
type
is.null(name)
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collect_list
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
errors <- c()
for (i in 1:(length(args)-4)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
collect_list
i
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
errors <- c()
for (i in 1:(length(args)-3)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
collect_list
i
i <- 14
arg <- args[i]
type
name
! type == "valueless"
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
type <- argument_possibles$type[which(argument_possibles$long == name)]
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
i
i <- 15
arg <- args[i]
collector <- c(collector, arg)
i <- 16
arg <- args[i]
length(args)
if (grepl(arg, pattern = "RSeq_CLI/helpers")) {break}
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
errors <- c()
for (i in 1:(length(args))) {
arg <- args[i]
if (grepl(arg, pattern = "RSeq_CLI/helpers")) {break}
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
collect_list
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
errors <- c()
for (i in 1:(length(args))) {
arg <- args[i]
if (substr(arg, 1, 1) == "-" || grepl(arg, pattern = "RSeq_CLI/helpers")) {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
if (grepl(arg, pattern = "RSeq_CLI/helpers")) {break}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
collect_list
# # print(args)
# args <- c("--experiment", "/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/tests/qDRIP_R1.fastq",
#           "-c", "/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/tests/qDRIP_ctr_R1.fastq",
#          "-g", "mm10", "-n", "my_experiment", "-o", "RSeq_out/", "-t", "20", "--noDedupe", "-m", "DRIP",
#          "/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/helpers")
args <- c("-e1", "/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/tests/qDRIP_R1.fastq",
"-2", "/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/tests/qDRIP_R2.fastq",
"-c1", "/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/tests/qDRIP_ctr_R1.fastq",
"-c2", "/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/tests/qDRIP_ctr_R1.fastq",
"-m", "qDRIP", "-s", "RSeq_CLI/tests/manifest_for_RSeq_testing_09092020_small.csv",
"-g", "hg38", "-n", "my_experiment", "-o", "RSeq_out/", "-t", "20",
"--dryRun", "--keepTmp",
"/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/helpers")
argument_possibles <- data.frame(
short = c("e", "e1", "e2", "c", "c1", "c2", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA, NA),
long = c("experiment", "experiment_R1", "experiment_R2", "control", "control_R1", "control_R2",
"mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "force", "noDedupe", "keepTmp"),
type = c(rep("valued", 13), rep("valueless", 7)), stringsAsFactors = FALSE
)
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
errors <- c()
for (i in 1:(length(args))) {
arg <- args[i]
if (substr(arg, 1, 1) == "-" || grepl(arg, pattern = "RSeq_CLI/helpers")) {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
if (grepl(arg, pattern = "RSeq_CLI/helpers")) {break}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
type
argument_possibles
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
unrecognized_arguments
if (length(unrecognized_arguments)) {
errors <- c(errors, paste0("Unrecognized argument(s): ",paste0(unrecognized_arguments, collapse = ", "), "."))
}
errors
errors <- c(errors, paste0("Unrecognized argument(s): '",paste0(unrecognized_arguments, collapse = "', '"), "'."))
errors
type
