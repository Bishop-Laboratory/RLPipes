hp$x$layout$xaxis3$ticktext <- hp$x$layout$xaxis3$ticktext[1:5]  # Step #2
hp$x$layout$xaxis3$tickvals <- hp$x$layout$xaxis3$tickvals[1:5]
hp$x$layout$xaxis3$tickfont$color <- "green"  # Step #3
hp$x$data[[10]] <- hp$x$data[[5]]
hp$x$data[[10]]$xaxis <- "x3"  # Step #4
hp
str(hp$x$data[[5]])
str(hp$x$data[[10]])
groups(hp)
schema(hp)
hp$x$data[[1]]$name
hp$x$data[[1]]
(#39BEB1,solid)
hp %>% add_trace(data = corSmall, type= "heatmap")
hp %>% add_trace(data = corSmall)
hp %>% add_heatmap(z = corSmall, type= "heatmap")
hp %>% add_heatmap(z = corSmall, x = rownames(corSmall), type= "heatmap")
hp %>% add_heatmap(z = corSmall, x = 1:length(rownames(corSmall)), type= "heatmap")
corSmall
hp %>% add_heatmap(z = corSmall, x = 1:length(rownames(corSmall)))
add_heatmap(z = corSmall, x = 1:length(rownames(corSmall)))
add_heatmap(p = hp, z = corSmall, x = 1:length(rownames(corSmall)))
save(corSmall, file = "RSeq_CLI/analysis/corsmall.rda")
knitr::opts_chunk$set(echo = FALSE)
data_file <- "RSeq_CLI/tests/RSeq_out16/SRX113812_Ntera2_DNA/QC/SRX113812_Ntera2_DNA.hg38.QC.report.rda"
load(data_file)
data_file <- "../../RSeq_CLI/tests/RSeq_out16/SRX113812_Ntera2_DNA/QC/SRX113812_Ntera2_DNA.hg38.QC.report.rda"
View(colData)
data_file <- "../../RSeq_CLI/tests/RSeq_out16/SRX113812_Ntera2_DNA/QC/SRX113812_Ntera2_DNA.hg38.QC.report.rda"
load(data_file)
dim(corMat)
?heatmaply
?render
argument_possibles <- data.frame(
short <- c("e", "c", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA),
long <- c("experiment", "control", "mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "noDedupe", "keepTmp")
)
argument_possibles
argument_possibles <- data.frame(
short = c("e", "c", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA),
long = c("experiment", "control", "mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "noDedupe", "keepTmp")
)
argument_possibles
args <- c("-e", "treated.fastq", "-c", "untreated.fastq", "-m", "DRIP",
"-g", "mm10", "-n", "my_experiment", "-o", "RSeq_out/", "-t", "20")
i <- 1
arg <- args[i]
arg
for (i in 1:length(args)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag
print(arg)
}
}
# CASE: it is a flag -- colect following
collector <- c()
collect_list <- list()
name
is.null(name)
name <- NULL
i <- 1
arg <- args[i]
substr(arg, 1, 1) == "-"
is.null(name)
# CASE: it is a flag -- colect following
if (! is.null(name)) {
collect_list[[name]] <- collector
}
collector <- c()
name <- arg
i <- 2
arg <- args[i]
substr(arg, 1, 1) == "-"
collector <- c(collector, arg)
print(collector)
i <- 3
arg <- args[i]
substr(arg, 1, 1) == "-"
is.null(name)
collect_list[[name]] <- collector
collect_list <- list()
name <- NULL
for (i in 1:length(args)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
if (! is.null(name)) {
collect_list[[name]] <- collector
}
collector <- c()
name <- arg
next
} else {
collector <- c(collector, arg)
}
print(collector)
}
View(collect_list)
args <- c("-e", "treated1.fastq", "treated2.fastq", "-c", "untreated.fastq", "control2.fastq", "-m", "DRIP",
"-g", "mm10", "-n", "my_experiment", "-o", "RSeq_out/", "-t", "20")
argument_possibles <- data.frame(
short = c("e", "c", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA),
long = c("experiment", "control", "mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "noDedupe", "keepTmp")
)
collect_list <- list()
name <- NULL
for (i in 1:length(args)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
if (! is.null(name)) {
collect_list[[name]] <- collector
}
collector <- c()
name <- arg
next
} else {
collector <- c(collector, arg)
}
print(collector)
}
View(colData)
View(collect_list)
View(collect_list)
name <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
arg
collect_list <- list()
name <- NULL
for (i in 1:length(args)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
if (! is.null(name)) {
collect_list[[name]] <- collector
}
collector <- c()
name <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
next
} else {
collector <- c(collector, arg)
}
}
View(collect_list)
args <- c("--experiment", "treated1.fastq", "treated2.fastq", "-c", "untreated.fastq", "control2.fastq", "-m", "DRIP",
"-g", "mm10", "-n", "my_experiment", "-o", "RSeq_out/", "-t", "20", "--noDedupe")
argument_possibles <- data.frame(
short = c("e", "c", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA),
long = c("experiment", "control", "mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "noDedupe", "keepTmp")
)
collect_list <- list()
name <- NULL
for (i in 1:length(args)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
if (! is.null(name)) {
collect_list[[name]] <- collector
}
collector <- c()
name <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
next
} else {
collector <- c(collector, arg)
}
}
View(collect_list)
argument_possibles <- data.frame(
short = c("e", "c", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA),
long = c("experiment", "control", "mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "noDedupe", "keepTmp"),
type = c(rep("valued", 11), rep("valueless", 4))
)
argument_possibles
argument_possibles == name
(argument_possibles == name)[,2]
(argument_possibles == name)[,c(1:2)]
argument_possibles$type[(argument_possibles == name)[,c(1:2)]]
argument_possibles$type[which(argument_possibles == name)[,c(1:2)]]
argument_possibles$type[which((argument_possibles == name)[,c(1:2)])]
which((argument_possibles == name)[,c(1:2)])
name
which(argument_possibles$short == name)
argument_possibles$short == name
argument_possibles$short == name || argument_possibles$long == name
argument_possibles$long == name
type <- argument_possibles$type[argument_possibles$short == name]
type
type <- argument_possibles$type[which(argument_possibles$short == name)]
type
argument_possibles <- data.frame(
short = c("e", "c", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA),
long = c("experiment", "control", "mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "noDedupe", "keepTmp"),
type = c(rep("valued", 11), rep("valueless", 4)), stringsAsFactors = FALSE
)
type <- argument_possibles$type[which(argument_possibles$short == name)]
type <- argument_possibles$type[which(argument_possibles$short == name)]
type <- argument_possibles$type[which(argument_possibles$short == name)]
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
}
unrecognized_arguments <- c()
collect_list <- list()
name <- NULL
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
for (i in 1:length(args)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
if (! is.null(name)) {
collect_list[[name]] <- collector
}
collector <- c()
name <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
View(collect_list)
argument_possibles$long[argument_possibles$short == nameRaw]
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
argument_possibles$long[argument_possibles$short == nameRaw]
argument_possibles$long[which(argument_possibles$short == nameRaw)]
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
i <- 1
arg <- args[i]
collector <- c()
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
for (i in 1:length(args)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name)) {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
collect_list
# Compile experiment and control into sample sheet
experiment <- collect_list$experiment
# Compile experiment and control into sample sheet
experiment <- collect_list$experiment
control <- collect_list$control
# Compile experiment and control into sample sheet
experiment <- collect_list$experiment
control <- collect_list$control
control <- collect_list$control2
# Compile experiment and control into sample sheet
experiment <- collect_list$experiment
control <- collect_list$control
mode <- collect_list$mode
outdir <- collect_list$outputDir
genome <- collect_list$genome
script.dir <- dirname(sys.frame(1)$ofile)
sys.frames()
args <- c("--experiment", "treated1.fastq", "treated2.fastq", "-c", "untreated.fastq", "control2.fastq", "-m", "DRIP",
"-g", "mm10", "-n", "my_experiment", "-o", "RSeq_out/", "-t", "20", "--noDedupe",
"/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/helpers")
helpers_dir <- args[length(args)]
# Source helpers
source(file.path(helpers_dir, "utils.R"))
# Load required data objects
load(file.path(helpers_dir, "data", "available_genomes.rda"))
data.frame(experiment, control)
samples <- data.frame(experiment, control, mode)
sampels
samples <- data.frame(experiment, control, mode)
samples
samples <- data.frame(experiment,
control,
mode,
outdir)
samples
samples <- data.frame(experiment,
control,
mode,
outdir,
genome)
samples
samples <- collect_list$sample
samples <- collect_list$samples
if (is.null(samples)) {
samples <- data.frame(experiment,
control,
mode,
outdir,
genome)
}
samples
genome_home_dir <- collect_list$genome_home_dir
samples <- data.frame(experiment,
control,
mode,
outdir,
genome,
genome_home_dir)
if (is.null(experiment)) {stop("Must supply experiment or sampleSheet")}
errors <- c()
errors <- c()
if (is.null(experiment)) {errors <- c(errors, "Must supply experiment or sampleSheet")}
genome_home_dir
if (is.null(genome_home_dir)) {genome_home_dir <- file.path(path.expand("~"), ".RSeq_genomes")}
if (is.null(experiment)) {errors <- c(errors, "No experiment or sampleSheet specified!")}
if (is.null(mode)) {errors <- c(errors, "No mode specified!")}
if (is.null(outdir)) {outdir <- "RSeq_out/"}
if (is.null(genome)) {noGenome <- TRUE}
if (is.null(genome_home_dir)) {genome_home_dir <- file.path(path.expand("~"), ".RSeq_genomes")}
errors
errors <- c()
if (is.null(experiment)) {errors <- c(errors, "No experiment or sampleSheet specified!")}
if (is.null(mode)) {errors <- c(errors, "No mode specified!")}
if (is.null(outdir)) {outdir <- "RSeq_out/"}
if (is.null(genome)) {noGenome <- TRUE}
if (is.null(genome_home_dir)) {genome_home_dir <- file.path(path.expand("~"), ".RSeq_genomes")}
errors
if (is.null(control)) {noControl <- TRUE}
samples <- data.frame(experiment, mode, outdir, genome_home_dir)
noContol
! noContol
noControl <- ifelse(is.null(control), TRUE, FALSE)
noGenome <- ifelse(is.null(genome), TRUE, FALSE)
threads <- collect_list$threads
if (is.null(threads)) {threads <- 1}
if (is.null(threads)) {threads <- 1} else {threads <- as.numeric(threads)}
argument_possibles <- data.frame(
short = c("e", "c", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA),
long = c("experiment", "control", "mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "noDedupe", "keepTmp"),
type = c(rep("valued", 9), rep("valueless", 6)), stringsAsFactors = FALSE
)
View(argument_possibles)
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
args <- c("--experiment", "treated1.fastq", "treated2.fastq", "-c", "untreated.fastq", "control2.fastq", "-m", "DRIP",
"-g", "mm10", "-n", "my_experiment", "-o", "RSeq_out/", "-t", "20", "--noDedupe", "-v", "-h",
"/home/UTHSCSA/millerh1/Bishop.lab/Projects/RSeq/RSeq_CLI/helpers")
argument_possibles <- data.frame(
short = c("e", "c", "m", "g", "n", "s", "o", "G", "t", "v", "h", NA, NA, NA, NA),
long = c("experiment", "control", "mode", "genome", "name", "sampleSheet", "outputDir",
"genomeDir", "threads", "version", "help", "dryRun", "noFastp", "noDedupe", "keepTmp"),
type = c(rep("valued", 9), rep("valueless", 6)), stringsAsFactors = FALSE
)
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
for (i in 1:(length(args)-1)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name)) {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
collect_list
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
args
i <- 17
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
arg <- args[i]
substr(arg, 1, 1) == "-"
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name)) {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
type <- argument_possibles$type[which(argument_possibles$long == name)]
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
i <- 18
arg <- args[i]
substr(arg, 1, 1) == "-"
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name)) {
collect_list[[name]] <- collector
}
! is.null(name)
! type == "valueless"
# Loop for parsing command line shell arguments
collect_list <- list()
name <- NULL
unrecognized_arguments <- c()
for (i in 1:(length(args)-1)) {
arg <- args[i]
if (substr(arg, 1, 1) == "-") {
# CASE: it is a flag -- colect following
# Collect from collector if name isn't in NULL state (collector will be full)
if (! is.null(name) && ! type == "valueless") {
collect_list[[name]] <- collector
}
collector <- c()  # re-init collector
# Get the flag text (could be short-form or long-form flag)
nameRaw <- gsub(arg, pattern = "^[-]{1,2}", replacement = "")
# Get the long-form name if not already provided
name <- argument_possibles$long[which(argument_possibles$short == nameRaw)]
if (! length(name)) {
name <- nameRaw
}
# Get the argument type
type <- argument_possibles$type[which(argument_possibles$short == name)]
if (! length(type)) {
type <- argument_possibles$type[which(argument_possibles$long == name)]
if (! length(type)) {
unrecognized_arguments <- c(unrecognized_arguments, arg)
}
}
# Collect valueless arguments as logical
if (type == "valueless") {
collect_list[[name]] <- TRUE
}
next
} else {
collector <- c(collector, arg)
}
}
collect_list
if (! is.null(collect_list$help)) {cat("usage"); quit(status = 0, save = "no")}
