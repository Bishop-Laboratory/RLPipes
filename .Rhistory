# Epic unstranded
bp <- list.files("~/Bishop.lab/Projects/RMapDB/data/", recursive = TRUE, full.names = TRUE,
pattern = "_[a-zA-Z]+[0-9]+\\.unstranded\\.bed")
bp
bp <- bp[grep(bp, pattern = "peaks_final_unstranded")]
bp
# Upload peaks
library(aws.s3)
# Copy files to new folder
dir.create("helpers/export/final-peaks-unstraded")
# Copy files to new folder
dir.create("helpers/export/final-peaks-unstranded")
i <- 1
filenow <- bp[i]
file.copy(filenow, to = "helpers/export/final-peaks-unstranded")
for (i in 1:length(bp)) {
print(i)
filenow <- bp[i]
file.copy(filenow, to = "helpers/export/final-peaks-unstranded")
}
##### Correlation analysis #####
library(tidyverse)
# Pivot the resulting table into a matrix
rl_cons_raw <- read_tsv("misc/conservation_analysis/data/hg38_10kb-widow_2.5kb-step_tiles.intersected.bed",
col_names = c("seqnames", "start", "end", "intersected_file", "number_of_intersects"))
rl_cons_raw2 <- head(rl_cons_raw, n = 10000)
View(rl_cons_raw2)
table(rl_cons_raw2$intersected_file)
252 * 10
rl_cons_raw2 <- head(rl_cons_raw, n = 2520)
252 * 10
table(rl_cons_raw2$intersected_file)
rl_cons_raw2$id <- seq(rl_cons_raw2$seqnames)
rl_cons_raw2$id
rl_cons_raw2$id <- paste0("window_" seq(rl_cons_raw2$seqnames))
rl_cons_raw2$id <- paste0("window_", seq(rl_cons_raw2$seqnames))
rl_cons_raw2$id
rl_cons_raw2 <- head(rl_cons_raw, n = 2520)
rl_cons_raw2 %>%
mutate(id = paste0("window_", seq(rl_cons_raw2$seqnames)))
rl_cons_raw2 %>%
mutate(id = paste0("window_", seq(rl_cons_raw2$seqnames))) %>%
select(id, intersected_file, number_of_intersects)
rl_cons_raw2 %>%
mutate(id = paste0("window_", seq(rl_cons_raw2$seqnames))) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider()
rl_cons_raw2 %>%
mutate(id = paste0("window_", seq(rl_cons_raw2$seqnames))) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file))
rl_cons_raw2 %>%
mutate(id = paste0("window_", seq(rl_cons_raw2$seqnames))) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider()
rl_cons_raw2 %>%
mutate(id = paste0("window_", seq(rl_cons_raw2$seqnames))) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file)
?pivot_wider
rl_cons_raw2 %>%
mutate(id = paste0("window_", seq(rl_cons_raw2$seqnames))) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
rl_cons_raw2 %>%
mutate(id = paste0("window_", seq(rl_cons_raw2$seqnames))) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects) %>%
pull(id)
dd <- rl_cons_raw2 %>%
mutate(id = paste0("window_", seq(rl_cons_raw2$seqnames))) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects)
View(dd)
dd <- rl_cons_raw2 %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(intersected_file, number_of_intersects)
View(dd)
dd %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
dd <- dd %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
dd <- rl_cons_raw2 %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(intersected_file, number_of_intersects)
table(rl_cons_raw2$intersected_file)
number_of_peak_files <- 252
number_of_peak_files <- 252
rl_cons_raw2$seqnames
length(rl_cons_raw2$seqnames)
length(rl_cons_raw2$seqnames) / number_of_peak_files
seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)
rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files))
dd <- rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files))
View(dd)
rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
rl_cons_raw2 <- head(rl_cons_raw, n = 25200)
number_of_peak_files <- 252
rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
rl_cons_mat <- rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
View(rl_cons_mat)
rl_cons_raw2 <- head(rl_cons_raw, n = 252000)
number_of_peak_files <- 252
rl_cons_mat <- rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
rl_cons_raw2$number_of_intersects
hist(rl_cons_raw2$number_of_intersects)
any(is.na(rl_cons_raw2$number_of_intersects))
rl_cons_mat <- rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(number_of_intersects = ifelse(number_of_intersects > 0, 1, 0))
rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(number_of_intersects = ifelse(number_of_intersects > 0, 1, 0)) %>% pull(number_of_intersects)
rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(number_of_intersects = ifelse(number_of_intersects > 0, 1, 0)) %>% pull(number_of_intersects) %>% hist()
rl_cons_mat <- rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(number_of_intersects = ifelse(number_of_intersects > 0, 1, 0)) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
rl_cons_raw2 <- head(rl_cons_raw, n = 25200000)
number_of_peak_files <- 252
rl_cons_mat <- rl_cons_raw2 %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(number_of_intersects = ifelse(number_of_intersects > 0, 1, 0)) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
rl_cons_mat <- rl_cons_raw %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw2$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(number_of_intersects = ifelse(number_of_intersects > 0, 1, 0)) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
rl_cons_mat <- rl_cons_raw %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
mutate(number_of_intersects = ifelse(number_of_intersects > 0, 1, 0)) %>%
mutate(intersected_file = paste0("peakfile_", intersected_file)) %>%
select(id, intersected_file, number_of_intersects) %>%
pivot_wider(names_from = intersected_file, values_from = number_of_intersects)
object.size(rl_cons_mat) / 1000000
colnames(rl_cons_mat)
rl_cons_mat2 <- column_to_rownames(rl_cons_mat, var = "id")
rl_cons_mat2
rs <- rowSums(rl_cons_mat2)
rs
hist(rs)
window_key <- rl_cons_raw %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
select(id, seqnames, start, end)
window_key <- rl_cons_raw %>%
mutate(id = rep(paste0("window_", seq(length(rl_cons_raw$seqnames) / number_of_peak_files)), each = number_of_peak_files)) %>%
select(id, seqnames, start, end) %>%
distinct(id, .keep_all = TRUE)
window_key
conservation_simple$number_of_samples_overlapping <- rs
conservation_simple <- window_key %>%
mutate(score = rs)
conservation_simple
conservation_simple <- window_key %>%
mutate(score = rs) %>%
column_to_rownames(var = "id")
conservation_simple
write_csv(conservation_simple, path = "misc/conservation_analysis/data/hg38_10kb-widow_2.5kb-step_tiles.conservation_levels.bed")
# Read in the results as a GRanges object
rl_cons <- read_tsv("misc/conservation_analysis/data/hg38_10kb-widow_2.5kb-step_tiles.conservation_levels.bed",
col_names = c("seqnames", "start", "end", "score"))
rl_cons
write_tsv(conservation_simple, path = "misc/conservation_analysis/data/hg38_10kb-widow_2.5kb-step_tiles.conservation_levels.bed")
# Read in the results as a GRanges object
rl_cons <- read_tsv("misc/conservation_analysis/data/hg38_10kb-widow_2.5kb-step_tiles.conservation_levels.bed",
col_names = c("seqnames", "start", "end", "score"))
rl_cons
conservation_simple <- window_key %>%
mutate(score = rs)
write_tsv(conservation_simple, path = "misc/conservation_analysis/data/hg38_10kb-widow_2.5kb-step_tiles.conservation_levels.bed")
# Read in the results as a GRanges object
rl_cons <- read_tsv("misc/conservation_analysis/data/hg38_10kb-widow_2.5kb-step_tiles.conservation_levels.bed",
col_names = c("name", "seqnames", "start", "end", "score"))
rl_cons
conservation_simple
write_tsv(conservation_simple, path = "misc/conservation_analysis/data/hg38_10kb-widow_2.5kb-step_tiles.conservation_levels.bed")
# Read in the results as a GRanges object
rl_cons <- read_tsv("misc/conservation_analysis/data/hg38_10kb-widow_2.5kb-step_tiles.conservation_levels.bed",
col_names = c("name", "seqnames", "start", "end", "score"))
rl_cons
# Read in the results as a GRanges object
rl_cons <- read_tsv("misc/conservation_analysis/data/hg38_10kb-widow_2.5kb-step_tiles.conservation_levels.bed", skip = 1,
col_names = c("name", "seqnames", "start", "end", "score"))
rl_cons
rl_cons <- toGRanges(as.data.frame(rl_cons))
library(ChIPpeakAnno)
rl_cons <- toGRanges(as.data.frame(rl_cons))
rl_cons
# The score column of rl_cons represents the number of samples overlapping with that 10kb range
# See the histogram of scores
hist(rl_cons$score)
# Some windows have many R-loops overlapping with them, some have very few
top_ranges <- as.data.frame(rl_cons) %>%
top_n(10, score) %>%
rownames_to_column() %>%
pull(rowname)
rl_cons[top_ranges,]  # Top 10 Ranges with the maximum score
as.data.frame(rl_cons) %>%
top_n(100, score)
# Some windows have many R-loops overlapping with them, some have very few
top_ranges <- as.data.frame(rl_cons) %>%
top_n(600, score) %>%
rownames_to_column() %>%
pull(rowname)
as.data.frame(rl_cons) %>%
top_n(600, score)
ss <- as.data.frame(rl_cons) %>%
top_n(600, score)
View(ss)
# Total number of samples is 252
total_number_of_samples <- 252
# Some windows have many R-loops overlapping with them, some have very few
top_ranges <- as.data.frame(rl_cons) %>%
top_n(10, score) %>%
rownames_to_column() %>%
pull(rowname)
rl_cons[top_ranges,]  # Top 10 Ranges with the maximum score
# Get the pct conservation
rl_cons$pct_cons <- 100 * (rl_cons$score / 252)
hist(rl_cons$pct_cons)
# See histogram of pct conservation
hist(rl_cons$score)
# See histogram of pct conservation
hist(rl_cons$pct_cons)
max(rl_cons$pct_cons)
# Some windows have many R-loops overlapping with them, some have very few
top_ranges <- as.data.frame(rl_cons) %>%
top_n(10, score) %>%
rownames_to_column() %>%
pull(rowname)
rl_cons[top_ranges,]  # Top 10 Ranges with the maximum score
conservation_simple
# Scores
library(tidyverse)
library(ChIPpeakAnno)
library(factoextra)
rmap_samples <- read_csv("misc/rmap_full_11_25.csv")
rmap_featuresfull <- rmap_samples %>%
mutate(has_control = ifelse(is.na(control), 0, 1)) %>%
dplyr::select(clean_name, # corr_median, corr_skewness, corr_kurtosis,
rlfs_pval,
rlfs_median, rlfs_skewness, rlfs_kurtosis, `3UTR__LogP enrichment (+values depleted)`, `Retroposon__LogP enrichment (+values depleted)`,
`miRNA__LogP enrichment (+values depleted)`, `TTS__LogP enrichment (+values depleted)`, `SINE__LogP enrichment (+values depleted)`,
`LINE__LogP enrichment (+values depleted)`, `tRNA__LogP enrichment (+values depleted)`, `rRNA__LogP enrichment (+values depleted)`,
`Exon__LogP enrichment (+values depleted)`, `Intron__LogP enrichment (+values depleted)`, `Intergenic__LogP enrichment (+values depleted)`,
`Promoter__LogP enrichment (+values depleted)`, `5UTR__LogP enrichment (+values depleted)`,
`Satellite__LogP enrichment (+values depleted)`, `MACS2__Percentage Peaks Overlapping`,
`EPIC2__Percentage Peaks Overlapping`,
gc_content, pct_aligned,
percent_passing, pct_duplicated) %>%
mutate_at(.vars = vars(contains('LogP')), .funs = function(x) {as.numeric(as.character(x)) * -1})
rmap_features <- rmap_samples %>%
mutate(has_control = ifelse(is.na(control), 0, 1)) %>%
dplyr::select(clean_name, # corr_median, corr_skewness, corr_kurtosis,
rlfs_pval,
rlfs_median, rlfs_skewness, rlfs_kurtosis, `3UTR__LogP enrichment (+values depleted)`, `Retroposon__LogP enrichment (+values depleted)`,
`miRNA__LogP enrichment (+values depleted)`, `TTS__LogP enrichment (+values depleted)`, `SINE__LogP enrichment (+values depleted)`,
`LINE__LogP enrichment (+values depleted)`, `tRNA__LogP enrichment (+values depleted)`, `rRNA__LogP enrichment (+values depleted)`,
`Exon__LogP enrichment (+values depleted)`, `Intron__LogP enrichment (+values depleted)`, `Intergenic__LogP enrichment (+values depleted)`,
`Promoter__LogP enrichment (+values depleted)`, `5UTR__LogP enrichment (+values depleted)`,
`Satellite__LogP enrichment (+values depleted)`, `MACS2__Percentage Peaks Overlapping`,
`EPIC2__Percentage Peaks Overlapping`,
gc_content, pct_aligned,
percent_passing, pct_duplicated) %>%
mutate_at(.vars = vars(contains('LogP')), .funs = function(x) {as.numeric(as.character(x)) * -1})
View(rmap_features)
colnames(rmap_featuresfull) <- gsub(colnames(rmap_featuresfull), pattern = "__L.+", replacement = "")
colnames(rmap_featuresfull) <- gsub(colnames(rmap_featuresfull), pattern = "__P.+", replacement = " % Overlap")
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "__L.+", replacement = "")
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "__L.+", replacement = "")
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "__P.+", replacement = " % Overlap")
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "rlfs_", replacement = "RLFS ")
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "corr_", replacement = "Correlation ")
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "gc_", replacement = "GC ")
rmap_features <- rmap_samples %>%
mutate(has_control = ifelse(is.na(control), 0, 1)) %>%
dplyr::select(clean_name, # corr_median, corr_skewness, corr_kurtosis,
rlfs_pval,
rlfs_median, rlfs_skewness, rlfs_kurtosis, `3UTR__LogP enrichment (+values depleted)`, `Retroposon__LogP enrichment (+values depleted)`,
`miRNA__LogP enrichment (+values depleted)`, `TTS__LogP enrichment (+values depleted)`, `SINE__LogP enrichment (+values depleted)`,
`LINE__LogP enrichment (+values depleted)`, `tRNA__LogP enrichment (+values depleted)`, `rRNA__LogP enrichment (+values depleted)`,
`Exon__LogP enrichment (+values depleted)`, `Intron__LogP enrichment (+values depleted)`, `Intergenic__LogP enrichment (+values depleted)`,
`Promoter__LogP enrichment (+values depleted)`, `5UTR__LogP enrichment (+values depleted)`,
`Satellite__LogP enrichment (+values depleted)`, `MACS2__Percentage Peaks Overlapping`,
`EPIC2__Percentage Peaks Overlapping`,
gc_content, pct_aligned,
percent_passing, pct_duplicated) %>%
mutate_at(.vars = vars(contains('LogP')), .funs = function(x) {as.numeric(as.character(x)) * -1})
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "__L.+", replacement = "")
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "__P.+", replacement = " % Overlap")
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "rlfs_", replacement = "RLFS ")
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "corr_", replacement = "Correlation ")
colnames(rmap_features) <- gsub(colnames(rmap_features), pattern = "gc_", replacement = "GC ")
rmap_features <- rmap_featuresfull %>%
column_to_rownames(var = "clean_name") %>%
as.matrix()
View(rmap_features)
rmap_features
rmap_features <- apply(rmap_features, 1:2, as.numeric)
rmap_features <- apply(rmap_features, 1:2, function(x) {ifelse(is.na(x), 0, x)})
rmap_features <- rmap_features[, which(colSums(rmap_features) != 0)]
rmap_features
rmap_features <- rmap_features[, which(colSums(rmap_features) != 0 & rowSums(rmap_features) != 0)]
rmap_features <- rmap_features[which(rowSums(rmap_features) != 0), which(colSums(rmap_features) != 0)]
library(ChIPpeakAnno)
library(ChIPpeakAnno)
install.packages('IRkernel')
IRkernel::installspec(name = 'ir361', displayname = 'R 3.6.1')
# Peaks final unstranded
bp <- list.files("~/Bishop.lab/Projects/RMapDB/data/", recursive = TRUE, full.names = TRUE,
pattern = "_[a-zA-Z]+[0-9]+\\.report\\.html")
# Peaks final unstranded
bp <- list.files("~/Bishop.lab/Projects/RMapDB/data/", recursive = TRUE, full.names = TRUE,
pattern = "\\.report\\.html")
# Peaks final unstranded
bp <- list.files("~/Bishop.lab/Projects/RMapDB/data/", recursive = TRUE, full.names = TRUE,
pattern = ".\\.report\\.html")
# Peaks final unstranded
bp <- list.files("~/Bishop.lab/Projects/RMapDB/data/", recursive = TRUE, full.names = TRUE,
pattern = ".\\.html")
bp
# Peaks final unstranded
bp <- list.files("~/Bishop.lab/Projects/RMapDB/data/", recursive = TRUE, full.names = TRUE,
pattern = "._report\\.html")
bp
# Copy files to new folder
dir.create("helpers/export/rseq-quality-reports")
for (i in 1:length(bp)) {
print(i)
filenow <- bp[i]
file.copy(filenow, to = "helpers/export/rseq-quality-reports")
}
# Peaks final unstranded
bp <- list.files("~/Bishop.lab/Projects/RMapDB/data/", recursive = TRUE, full.names = TRUE,
pattern = "\\.bw")
bp
bp <- bp[grep(bp, pattern = "coverage_unstranded")]
# Peaks final unstranded
bp <- list.files("~/Bishop.lab/Projects/RMapDB/data/", recursive = TRUE, full.names = TRUE,
pattern = "\\.bw")
bp <- bp[grep(bp, pattern = "coverage_unstranded")]
# Copy files to new folder
dir.create("helpers/export/rseq-coverage-unstranded")
# Peaks final unstranded
bp <- list.files("~/Bishop.lab/Projects/RMapDB/data/", recursive = TRUE, full.names = TRUE,
pattern = "\\.bw")
bp <- bp[grep(bp, pattern = "coverage_unstranded")]
# Copy files to new folder
dir.create("helpers/export/rseq-coverage-unstranded")
for (i in 1:length(bp)) {
print(i)
filenow <- bp[i]
file.copy(filenow, to = "helpers/export/rseq-coverage-unstranded")
}
